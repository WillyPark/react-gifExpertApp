{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAXW,SAAAC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAOP,GAAP,mBAAsBO,OACzCN,EAAc,MAMlB,SACI,uBAAOO,KAAK,OAAOC,MAAQT,EAAaU,SAhBtB,SAAAP,GACtBF,EAAeE,EAAEQ,OAAOF,a,QCPnBG,EAAc,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEjC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,4BAAKA,Q,uBCLJK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAWF,GAD/C,+DAEAG,MAAOR,GAFP,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAGD,EAAIC,GACPhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QATvB,kBAaZY,GAbY,4CAAH,sDCIPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAEtB,ECHwB,SAAEA,GAC1B,MAA0BpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAW,WACPlB,EAASC,GACJkB,MAAM,SAAAC,GAEHC,YAAW,WACPJ,EAAS,CACLV,KAAMa,EACNL,SAAS,MAEd,WAEZ,CAAEd,IAEEe,EDhB0BM,CAAcrB,GAAlCW,EAAb,EAAQL,KAAaQ,EAArB,EAAqBA,QAQrB,OACI,qCACI,oBAAIlB,UAAU,oCAAd,SAAoDI,IAElDc,GAAW,mBAAGlB,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEQe,EAAOH,KAAK,SAAEC,GAAF,OACR,cAAC,EAAD,eAESA,GADCA,EAAIC,aEpBzBY,EAAe,WAE1B,MAAoC1C,mBAAS,CAAC,kBAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAOA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEI4C,EAAWf,KAAK,SAAAR,GAAQ,OAAI,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,Y,MCjBrDwB,IAASC,OAAQ,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.f7126b99.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\"); //Es importante poner un string vacio si queremos que no se muestre nada\r\n    const handleInputChange = e => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        if( inputValue.trim().length > 2){\r\n            setCategories( cats => [  inputValue, ...cats] );\r\n            setInputValue(\"\");\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input type=\"text\" value={ inputValue } onChange={ handleInputChange } />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const GifGridItem = ({ title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title }></img>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=3FbO3eEEizkqpAnx0Hm9RwbwloFlLYv6`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id:img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","// import { useState, useEffect } from \"react\"; //Con el useEffect ejecutamos código de manera condicional\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\"\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    //Este código lo pusimos mejor en nuestro Custom Hook\r\n    // useEffect( () => {\r\n    //     getGifs( category )\r\n    //         .then( setImages );\r\n    // }, [ category ]) //En caso de volver a hacer la petición HTTP pasamos la category\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( ( img ) => (\r\n                        <GifGridItem \r\n                            key={ img.id } \r\n                            { ...img } //Creamos un nuevo objeto y lo mandamos\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                setTimeout(() => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                }, 1500);\r\n            })\r\n    }, [ category ])\r\n\r\n    return state; // { data:[], loading: true }\r\n}","import { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState([\"One Punch Man\"]);\r\n\r\n  // const handleAdd = () => {\r\n  //   // setCategories( [...categories, \"HunterXHunter\"] );\r\n  //   setCategories( cats => [ ...cats, \"HunterXHunter\"] );\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={ setCategories } />\r\n      <hr></hr>\r\n\r\n      <ol>\r\n        {\r\n          categories.map( category => <GifGrid key={ category } category={ category } /> )\r\n        }\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n","import ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render( <GifExpertApp />, document.getElementById('root') );\n"],"sourceRoot":""}